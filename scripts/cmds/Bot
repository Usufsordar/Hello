const axios = require('axios');
const { URLSearchParams } = require('url');

module.exports = {
    config: {
        name: "bot",
        version: "1.4",
        author: "Aminulsordar",
        countDown: 5,
        role: 0,
        shortDescription: "Interactive Chatbot with Simsimi Toggle",
        longDescription: "A versatile chatbot with Simsimi integration, utility commands, toggleable Simsimi, and personalized greetings.",
        category: "Fun",
        guide: {
            en: "{pn} <command> | <text> (Use 'help' for commands) | {pn} on/off"
        }
    },
    onStart: async function ({ args, threadsData, message, event, getLang }) {
        if (args[0] === 'on' || args[0] === 'off') {
            await threadsData.set(event.threadID, args[0] === "on", "settings.simsimi");
            return message.reply(args[0] === "on" ? getLang("turnedOn") : getLang("turnedOff"));
        } else if (args[0] && args[0] !== 'help' && args[0] !== 'date' && args[0] !== 'ping' && args[0] !== 'uptime') {
            const yourMessage = args.join(" ");
            try {
                const responseMessage = await getMessage(yourMessage, (await threadsData.get(event.threadID, "settings.lang")) || global.GoatBot.config.language);
                return message.reply(`${responseMessage}`);
            } catch (err) {
                console.error("[BOT] Simsimi Error:", err);
                return message.reply(getLang("error") || "An error occurred while processing your request.");
            }
        }
    },
    onChat: async ({ args, message, threadsData, event, isUserCallCommand, getLang, api }) => {
        if (args.length > 0 && !isUserCallCommand && (await threadsData.get(event.threadID, "settings.simsimi"))) {
            try {
                const langCode = (await threadsData.get(event.threadID, "settings.lang")) || global.GoatBot.config.language;
                const responseMessage = await getMessage(args.join(" "), langCode);
                return message.reply(`${responseMessage}`);
            } catch (err) {
                console.error("[BOT] Simsimi Error:", err);
                return message.reply(getLang("error") || "An error occurred while processing your request.");
            }
        } else {
            const quotes = [
                "I love you 💝", "ভালোবাসি তোমাকে 🤖", "Hi, I'm massanger Bot i can help you.?🤖",
                "Use callad to contact admin!", "Hi, Don't disturb 🤖 🚘Now I'm going to Feni,Bangladesh..bye",
                "Hi, 🤖 i can help you~~~~", "আমি এখন আমিনুল বসের সাথে বিজি আছি",
                "আমাকে আমাকে না ডেকে আমার বসকে ডাকো এই নেও LINK :- https://www.facebook.com/100071880593545",
                "Hmmm sona 🖤 meye hoile kule aso ar sele hoile kule new 🫂😘",
                "Yah This Bot creator : PRINCE RID((A.R))     link => https://www.facebook.com/100071880593545",
                "হা বলো, শুনছি আমি 🤸‍♂️🫂", "Ato daktasen kn bujhlam na 😡", "jan bal falaba,🙂",
                "ask amr mon vlo nei dakben na🙂", "Hmm jan ummah😘😘", "jang hanga korba 🙂🖤",
                "iss ato dako keno lojja lage to 🫦🙈", "suna tomare amar valo lage,🙈😽"
            ];

            const prefixes = ['bot', 'Bot', '!bot', '!Bot'];

            if (!event.body) return;

            const prefix = prefixes.find(p => event.body.toLowerCase().startsWith(p.toLowerCase()));
            if (!prefix) return;

            const uid = event.senderID;
            let userName = "User";

            try {
                const userInfo = await api.getUserInfo(uid);
                userName = userInfo[uid]?.name || "User";
            } catch (error) {
                console.error("[BOT] Error fetching user info:", error);
            }

            const query = event.body.slice(prefix.length).trim();
            const args = query.split(" ");
            const command = args.shift().toLowerCase();

            const handleCommand = async (cmd, cmdArgs) => {
                switch (cmd) {
                    case "date":
                        const now = new Date();
                        const dateString = now.toLocaleString();
                        return message.reply(`📅 Current Date and Time: ${dateString}`);
                    case "ping":
                        const startTime = Date.now();
                        await message.reply("📡 Pinging...");
                        const endTime = Date.now();
                        const pingTime = endTime - startTime;
                        return message.reply(`⚡ Pong! Ping: ${pingTime}ms`);
                    case "uptime":
                        const uptime = process.uptime();
                        const hours = Math.floor(uptime / 3600);
                        const minutes = Math.floor((uptime % 3600) / 60);
                        const seconds = Math.floor(uptime % 60);
                        return message.reply(`⏱️ Uptime: ${hours}h ${minutes}m ${seconds}s`);
                    case "help":
                        return message.reply(`📜 Available commands: date, ping, uptime, on/off. Talk to me directly for Simsimi interaction.`);
                    default:
                        return handleSimsimi(query);
                }
            };

            const handleSimsimi = async (simsimiQuery) => {
                try {
                    const langCode = (await threadsData.get(event.threadID, "settings.lang")) || global.GoatBot.config.language;
                    const responseMessage = await getMessage(simsimiQuery,langCode);
                    return message.reply({
                        body: `🤖 ${userName} 🤖\n\n${responseMessage}`,
                        mentions: [{ id: uid, tag: userName }]
                    });
                } catch (error) {
                    console.error("[BOT] Simsimi Error:", error);
                    const randomQuote = quotes[Math.floor(Math.random() * quotes.length)];
                    return message.reply({
                        body: `🤖 ${userName} 🤖\n\n${randomQuote}`,
                        mentions: [{ id: uid, tag: userName }]
                    });
                }
            };

            await handleCommand(command, args.join(" "));
        }
    }
};

async function getMessage(yourMessage, langCode) {
    const res = await axios.post(
        'https://api.simsimi.vn/v1/simtalk',
        new URLSearchParams({
            'text': yourMessage,
            'lc': langCode || 'en'
        })
    );

    if (res.status > 200) {
        throw new Error(res.data.success);
    }

    return res.data.message;
}
